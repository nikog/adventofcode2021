// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_int = require("rescript/lib/js/js_int.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

function sum(arr, fn) {
  return arr.reduce((function (acc, i) {
                return acc + Curry._1(fn, i) | 0;
              }), 0);
}

function make(input) {
  var numbers = input.split(",").map(Belt_Int.fromString).map(Belt_Option.getExn);
  return Belt_Array.range(0, Caml_splice_call.spliceApply(Math.max, [numbers])).reduce((function (minFuelUsed, pos) {
                return Math.min(minFuelUsed, sum(numbers, (function (i) {
                                  return Math.abs(i - pos | 0);
                                })));
              }), Js_int.max);
}

var Part01 = {
  make: make
};

function fuelUse(dist) {
  return dist / 2 * (1 + dist);
}

function make$1(input) {
  var numbers = input.split(",").map(Belt_Int.fromString).map(Belt_Option.getExn);
  return Belt_Array.range(1, Caml_splice_call.spliceApply(Math.max, [numbers])).reduce((function (acc, pos) {
                return Math.min(acc, sum(numbers, (function (i) {
                                  return fuelUse(Math.abs(i - pos | 0)) | 0;
                                })));
              }), Js_int.max);
}

var Part02 = {
  fuelUse: fuelUse,
  make: make$1
};

Solution.make(make, "day07/input");

Solution.make(make$1, "day07/input");

exports.sum = sum;
exports.Part01 = Part01;
exports.Part02 = Part02;
/*  Not a pure module */
