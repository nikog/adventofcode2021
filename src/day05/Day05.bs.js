// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Set = require("rescript/lib/js/belt_Set.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var ParseError = /* @__PURE__ */Caml_exceptions.create("Day05.ParseError");

function parseCoordinate(string) {
  var coords = string.split(",").map(Belt_Int.fromString);
  if (coords.length !== 2) {
    throw {
          RE_EXN_ID: ParseError,
          Error: new Error()
        };
  }
  var x = coords[0];
  if (x !== undefined) {
    var y = coords[1];
    if (y !== undefined) {
      return [
              x,
              y
            ];
    }
    throw {
          RE_EXN_ID: ParseError,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: ParseError,
        Error: new Error()
      };
}

function parseLine(line) {
  return line.split(" -> ").map(parseCoordinate);
}

function makeRange(param) {
  if (param.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Day05.res",
            12,
            16
          ],
          Error: new Error()
        };
  }
  var match = param[0];
  var y1 = match[1];
  var x1 = match[0];
  var match$1 = param[1];
  var y2 = match$1[1];
  var x2 = match$1[0];
  var yDiff = y2 > y1 ? 1 : -1;
  var xDiff = x2 > x1 ? 1 : -1;
  if (x1 === x2) {
    return Belt_Array.makeBy((y2 - y1 | 0) + 1 | 0, (function (i) {
                  return [
                          x1,
                          y1 + Math.imul(i, yDiff) | 0
                        ];
                }));
  } else if (y1 === y2) {
    return Belt_Array.makeBy((x2 - x1 | 0) + 1 | 0, (function (i) {
                  return [
                          x1 + Math.imul(i, xDiff) | 0,
                          y1
                        ];
                }));
  } else {
    return Belt_Array.makeBy((x2 - x1 | 0) + 1 | 0, (function (i) {
                  return [
                          x1 + Math.imul(i, xDiff) | 0,
                          y1 + Math.imul(i, yDiff) | 0
                        ];
                }));
  }
}

function isHorizontalOrVertical(param) {
  if (param.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Day05.res",
            25,
            29
          ],
          Error: new Error()
        };
  }
  var match = param[0];
  var match$1 = param[1];
  if (Caml_obj.caml_equal(match[0], match$1[0])) {
    return true;
  } else {
    return Caml_obj.caml_equal(match[1], match$1[1]);
  }
}

function checkIntersect(param) {
  if (param.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Day05.res",
            26,
            21
          ],
          Error: new Error()
        };
  }
  var match = param[0];
  var y1 = match[1];
  var x1 = match[0];
  var match$1 = param[1];
  var y2 = match$1[1];
  var x2 = match$1[0];
  return function (param) {
    if (param.length !== 2) {
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "Day05.res",
              26,
              44
            ],
            Error: new Error()
          };
    }
    var match = param[0];
    var ay1 = match[1];
    var ax1 = match[0];
    var match$1 = param[1];
    var ay2 = match$1[1];
    var ax2 = match$1[0];
    if (x1 === x2 && x1 === ax1 && x1 === ax2) {
      var jooh = Math.max(0, (Math.min(y2, ay2) - Math.max(y1, ay1) | 0) + 1 | 0);
      return Belt_Array.makeBy(jooh, (function (i) {
                    return [
                            x1,
                            i + Math.max(y1, ay1) | 0
                          ];
                  }));
    }
    if (!(y1 === y2 && y1 === ay1 && y1 === ay2)) {
      if (x1 === x2 && x1 >= ax1 && x1 <= ax2 && ay1 >= y1 && ay1 <= y2) {
        return [[
                  x1,
                  ay1
                ]];
      } else if (y1 === y2 && y1 >= ay1 && y1 <= ay2 && ax1 >= x1 && ax1 <= x2) {
        return [[
                  ax1,
                  y1
                ]];
      } else {
        return [];
      }
    }
    var jooh$1 = Math.max(0, (Math.min(x2, ax2) - Math.max(x1, ax1) | 0) + 1 | 0);
    return Belt_Array.makeBy(jooh$1, (function (i) {
                  return [
                          i + Math.max(x1, ax1) | 0,
                          y1
                        ];
                }));
  };
}

function make(input) {
  var lines = input.split("\n").map(parseLine).filter(isHorizontalOrVertical).map(function (x) {
        return Belt_SortArray.stableSortBy(x, (function (param, param$1) {
                      var x2 = param$1[0];
                      var x1 = param[0];
                      if (x1 !== x2) {
                        return x1 - x2 | 0;
                      } else {
                        return param[1] - param$1[1] | 0;
                      }
                    }));
      });
  console.log(lines);
  console.log("----------");
  var intersections = lines.reduce((function (acc, line, i) {
          return acc.concat(lines.reduce((function (acc, line2, i2) {
                            if (i !== i2) {
                              return acc.concat(checkIntersect(line)(line2));
                            } else {
                              return acc;
                            }
                          }), []));
        }), []);
  return intersections.filter(function (param, i) {
              var y = param[1];
              var x = param[0];
              return intersections.findIndex(function (param) {
                          if (x === param[0]) {
                            return y === param[1];
                          } else {
                            return false;
                          }
                        }) === i;
            }).length;
}

var Part01 = {
  make: make
};

function unique(array) {
  var cmp = function (param, param$1) {
    var c = Caml_obj.caml_compare(param[0], param$1[0]);
    if (c !== 0) {
      return c;
    } else {
      return Caml_obj.caml_compare(param[1], param$1[1]);
    }
  };
  var PairComparator = Belt_Id.MakeComparable({
        cmp: cmp
      });
  return array.reduce((function (param, item) {
                  var duplicates = param[1];
                  var seen = param[0];
                  if (Belt_Set.has(seen, item)) {
                    return [
                            seen,
                            duplicates
                          ];
                  }
                  var seen$1 = Belt_Set.add(seen, item);
                  return [
                          seen$1,
                          duplicates.concat([item])
                        ];
                }), [
                Belt_Set.make(PairComparator),
                []
              ])[1];
}

function make$1(input) {
  return Belt_MapString.valuesToArray(input.split("\n").map(parseLine).map(function (x) {
                        return Belt_SortArray.stableSortBy(x, (function (param, param$1) {
                                      var x2 = param$1[0];
                                      var x1 = param[0];
                                      if (x1 !== x2) {
                                        return x1 - x2 | 0;
                                      } else {
                                        return param[1] - param$1[1] | 0;
                                      }
                                    }));
                      }).map(makeRange).reduce((function (acc, i) {
                      return i.reduce((function (acc, param) {
                                    var id = param[0].toString() + "." + param[1].toString();
                                    var count = Belt_Option.getWithDefault(Belt_MapString.get(acc, id), 0);
                                    return Belt_MapString.set(acc, id, count + 1 | 0);
                                  }), acc);
                    }), Belt_MapString.fromArray([]))).filter(function (x) {
              return x > 1;
            }).length;
}

var Part02 = {
  make: make$1
};

Solution.make(make$1, "day05/input");

exports.ParseError = ParseError;
exports.parseCoordinate = parseCoordinate;
exports.parseLine = parseLine;
exports.makeRange = makeRange;
exports.isHorizontalOrVertical = isHorizontalOrVertical;
exports.checkIntersect = checkIntersect;
exports.Part01 = Part01;
exports.unique = unique;
exports.Part02 = Part02;
/*  Not a pure module */
