// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function parseCommands(string) {
  var matches = string.match(/(.*)\s(\d*)/);
  var value = matches !== null && matches.length === 3 ? Belt_Int.fromString(matches[2]) : undefined;
  if (matches === null) {
    return [
            0,
            0
          ];
  }
  if (matches.length !== 3) {
    return [
            0,
            0
          ];
  }
  var match = matches[1];
  switch (match) {
    case "down" :
        if (value !== undefined) {
          return [
                  0,
                  value
                ];
        } else {
          return [
                  0,
                  0
                ];
        }
    case "forward" :
        if (value !== undefined) {
          return [
                  value,
                  0
                ];
        } else {
          return [
                  0,
                  0
                ];
        }
    case "up" :
        if (value !== undefined) {
          return [
                  0,
                  Math.imul(value, -1)
                ];
        } else {
          return [
                  0,
                  0
                ];
        }
    default:
      return [
              0,
              0
            ];
  }
}

function make(input) {
  var match = Belt_Array.reduce(input.split("\n"), [
        0,
        0
      ], (function (param, command) {
          var match = parseCommands(command);
          return [
                  param[0] + match[0] | 0,
                  param[1] + match[1] | 0
                ];
        }));
  return Math.imul(match[0], match[1]);
}

var Part01 = {
  parseCommands: parseCommands,
  make: make
};

function parseCommands$1(param, string) {
  var aim = param[2];
  var y = param[1];
  var x = param[0];
  var matches = string.match(/(.*)\s(\d*)/);
  var value = matches !== null && matches.length === 3 ? Belt_Int.fromString(matches[2]) : undefined;
  if (matches === null) {
    return [
            0,
            0,
            0
          ];
  }
  if (matches.length !== 3) {
    return [
            0,
            0,
            0
          ];
  }
  var match = matches[1];
  switch (match) {
    case "down" :
        if (value !== undefined) {
          return [
                  x,
                  y,
                  aim + value | 0
                ];
        } else {
          return [
                  0,
                  0,
                  0
                ];
        }
    case "forward" :
        if (value !== undefined) {
          return [
                  x + value | 0,
                  y + Math.imul(value, aim) | 0,
                  aim
                ];
        } else {
          return [
                  0,
                  0,
                  0
                ];
        }
    case "up" :
        if (value !== undefined) {
          return [
                  x,
                  y,
                  aim - value | 0
                ];
        } else {
          return [
                  0,
                  0,
                  0
                ];
        }
    default:
      return [
              0,
              0,
              0
            ];
  }
}

function make$1(input) {
  var match = Belt_Array.reduce(input.split("\n"), [
        0,
        0,
        0
      ], parseCommands$1);
  return Math.imul(match[0], match[1]);
}

var Part02 = {
  parseCommands: parseCommands$1,
  make: make$1
};

Solution.make(make$1, "day02/input");

exports.Part01 = Part01;
exports.Part02 = Part02;
/*  Not a pure module */
