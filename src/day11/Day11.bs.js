// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function splitTwoDimensional(str) {
  return str.split("\n").map(function (line) {
              return line.split("").map(function (cell) {
                          return Belt_Option.getExn(Belt_Int.fromString(cell));
                        });
            });
}

function traverse(arr, fn, acc) {
  return arr.reduce((function (acc, line, i) {
                return line.reduce((function (acc, param, j) {
                              return Curry._3(fn, acc, i, j);
                            }), acc);
              }), acc);
}

function getDefault(arr, i, j, $$default) {
  return Belt_Option.mapWithDefault(Belt_Array.get(arr, i), $$default, (function (x) {
                return Belt_Option.getWithDefault(Belt_Array.get(x, j), $$default);
              }));
}

var neighbors = [
  [
    -1,
    -1
  ],
  [
    0,
    -1
  ],
  [
    1,
    -1
  ],
  [
    1,
    0
  ],
  [
    1,
    1
  ],
  [
    0,
    1
  ],
  [
    -1,
    1
  ],
  [
    -1,
    0
  ]
];

function increment(arr, param) {
  var y = param[1];
  var x = param[0];
  var number = getDefault(arr, y, x, 0);
  if (number !== 0) {
    Caml_array.set(Caml_array.get(arr, y), x, number + 1 | 0);
    return arr;
  } else {
    return arr;
  }
}

function flash(arr, param) {
  var y = param[1];
  var x = param[0];
  var node = getDefault(arr, y, x, 0);
  if (node > 9) {
    Caml_array.set(Caml_array.get(arr, y), x, 0);
    return neighbors.reduce((function (acc, param) {
                  var dy = param[1];
                  var dx = param[0];
                  return flash(increment(acc, [
                                  x + dx | 0,
                                  y + dy | 0
                                ]), [
                              x + dx | 0,
                              y + dy | 0
                            ]);
                }), arr);
  } else {
    return arr;
  }
}

function make(input) {
  var map = splitTwoDimensional(input);
  var steps = Belt_Array.make(100, 0);
  var flashes = {
    contents: 0
  };
  steps.reduce((function (map, param) {
          var map$1 = traverse(traverse(map, (function (acc, i, j) {
                      Caml_array.set(Caml_array.get(acc, i), j, Caml_array.get(Caml_array.get(acc, i), j) + 1 | 0);
                      return acc;
                    }), map), (function (map, i, j) {
                  return flash(map, [
                              j,
                              i
                            ]);
                }), map);
          flashes.contents = flashes.contents + traverse(map$1, (function (acc, i, j) {
                  return acc + (
                          Caml_array.get(Caml_array.get(map$1, i), j) === 0 ? 1 : 0
                        ) | 0;
                }), 0) | 0;
          return map$1;
        }), map);
  return flashes.contents;
}

var Part01 = {
  make: make
};

function make$1(input) {
  var map = splitTwoDimensional(input);
  var flashes = false;
  var mapRef = map;
  var stepCount = 0;
  while(!flashes) {
    var map$1 = mapRef;
    var map$2 = traverse(traverse(map$1, (function (acc, i, j) {
                Caml_array.set(Caml_array.get(acc, i), j, Caml_array.get(Caml_array.get(acc, i), j) + 1 | 0);
                return acc;
              }), map$1), (function (map, i, j) {
            return flash(map, [
                        j,
                        i
                      ]);
          }), map$1);
    flashes = map$2.every(function (line) {
          return line.every(function (item) {
                      return item === 0;
                    });
        });
    mapRef = map$2;
    stepCount = stepCount + 1 | 0;
  };
  return stepCount;
}

var Part02 = {
  make: make$1
};

Solution.make(make, "day11/input");

Solution.make(make$1, "day11/input");

exports.splitTwoDimensional = splitTwoDimensional;
exports.traverse = traverse;
exports.getDefault = getDefault;
exports.neighbors = neighbors;
exports.increment = increment;
exports.flash = flash;
exports.Part01 = Part01;
exports.Part02 = Part02;
/*  Not a pure module */
