// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_int = require("rescript/lib/js/js_int.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SortArrayInt = require("rescript/lib/js/belt_SortArrayInt.js");

function getDefault(arr, i, j) {
  return Belt_Option.mapWithDefault(Belt_Array.get(arr, i), Js_int.max, (function (x) {
                return Belt_Option.getWithDefault(Belt_Array.get(x, j), Js_int.max);
              }));
}

function make(input) {
  var heightmap = input.split("\n").map(function (x) {
        return x.split("").map(function (x) {
                    return Belt_Option.getExn(Belt_Int.fromString(x));
                  });
      });
  return heightmap.reduce((function (acc, row, i) {
                return acc + row.reduce((function (acc, number, j) {
                              var top = getDefault(heightmap, i - 1 | 0, j);
                              var right = getDefault(heightmap, i, j + 1 | 0);
                              var bottom = getDefault(heightmap, i + 1 | 0, j);
                              var left = getDefault(heightmap, i, j - 1 | 0);
                              if (number < top && number < right && number < bottom && number < left) {
                                return (acc + number | 0) + 1 | 0;
                              } else {
                                return acc;
                              }
                            }), 0) | 0;
              }), 0);
}

var Part01 = {
  getDefault: getDefault,
  make: make
};

function getDefault$1(arr, i, j) {
  return Belt_Option.mapWithDefault(Belt_Array.get(arr, i), 9, (function (x) {
                return Belt_Option.getWithDefault(Belt_Array.get(x, j), 9);
              }));
}

function floodfill(map, i, j) {
  var node = getDefault$1(map, i, j);
  if (!(node !== 9 && node !== -1)) {
    return 0;
  }
  Caml_array.set(Caml_array.get(map, i), j, -1);
  var top = floodfill(map, i - 1 | 0, j);
  var right = floodfill(map, i, j + 1 | 0);
  var bottom = floodfill(map, i + 1 | 0, j);
  var left = floodfill(map, i, j - 1 | 0);
  return (((1 + top | 0) + right | 0) + bottom | 0) + left | 0;
}

function make$1(input) {
  var heightmap = input.split("\n").map(function (x) {
        return x.split("").map(function (x) {
                    return Belt_Option.getExn(Belt_Int.fromString(x));
                  });
      });
  return Belt_Array.reverse(Belt_SortArrayInt.stableSort(heightmap.reduce((function (acc, row, i) {
                            return acc.concat(row.reduce((function (acc, param, j) {
                                              var size = floodfill(heightmap, i, j);
                                              if (size > 0) {
                                                acc.push(size);
                                              }
                                              return acc;
                                            }), []));
                          }), []))).slice(0, 3).reduce((function (acc, i) {
                return Math.imul(acc, i);
              }), 1);
}

var Part02 = {
  getDefault: getDefault$1,
  floodfill: floodfill,
  make: make$1
};

Solution.make(make, "day09/input");

Solution.make(make$1, "day09/input");

exports.Part01 = Part01;
exports.Part02 = Part02;
/*  Not a pure module */
