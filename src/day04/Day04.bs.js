// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Solution = require("../Solution.bs.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function getNumbers(lines) {
  return Caml_array.get(lines, 0).split(",");
}

function getBoards(lines) {
  return lines.slice(2, lines.length).join("\n").split(/\n\n/gm).map(function (boardString) {
              return Belt_Option.getExn(boardString).split("\n").map(function (line) {
                          return line.trim().split(/ +/g).map(Belt_Option.getExn);
                        });
            });
}

function score(board, number) {
  return board.map(function (row) {
              return row.map(function (cell) {
                          if (cell === number) {
                            return "x";
                          } else {
                            return cell;
                          }
                        });
            });
}

function transpose(board) {
  return Caml_array.get(board, 0).map(function (param, i) {
              return board.map(function (row) {
                          return Caml_array.get(row, i);
                        });
            });
}

function hasBingo(board) {
  if (board.some(function (row) {
          return row.every(function (cell) {
                      return cell === "x";
                    });
        })) {
    return true;
  } else {
    return transpose(board).some(function (row) {
                return row.every(function (cell) {
                            return cell === "x";
                          });
              });
  }
}

function make(input) {
  var lines = input.split("\n");
  var numbers = getNumbers(lines);
  var boards = getBoards(lines);
  var match = numbers.reduce((function (param, number) {
          var winningBoard = param[1];
          var modifiedBoards = param[0];
          if (winningBoard !== undefined) {
            return [
                    modifiedBoards,
                    winningBoard,
                    param[2]
                  ];
          }
          var bingo = {
            contents: false
          };
          var bingoBoardIndex = {
            contents: -1
          };
          var newBoards = modifiedBoards.map(function (board, i) {
                var newBoard = score(board, number);
                if (!bingo.contents) {
                  bingo.contents = hasBingo(newBoard);
                  if (bingo.contents) {
                    bingoBoardIndex.contents = i;
                  }
                  
                }
                return newBoard;
              });
          if (bingo.contents) {
            return [
                    newBoards,
                    Caml_array.get(newBoards, bingoBoardIndex.contents),
                    number
                  ];
          } else {
            return [
                    newBoards,
                    undefined,
                    undefined
                  ];
          }
        }), [
        boards,
        undefined,
        undefined
      ]);
  var number = match[2];
  var board = match[1];
  console.log(board, number);
  var score$1 = board !== undefined ? board.reduce((function (acc, row) {
            return acc + row.reduce((function (acc, item) {
                          return acc + Belt_Option.getWithDefault(Belt_Int.fromString(item), 0) | 0;
                        }), 0) | 0;
          }), 0) : 0;
  return Math.imul(score$1, Belt_Option.getWithDefault(Belt_Option.flatMap(number, Belt_Int.fromString), 0));
}

var Part01 = {
  make: make
};

function make$1(input) {
  var lines = input.split("\n");
  var numbers = getNumbers(lines);
  var boards = getBoards(lines);
  var match = numbers.reduce((function (param, number) {
          var bingo = {
            contents: false
          };
          var bingoBoardIndex = {
            contents: -1
          };
          var newBoards = param[0].map(function (board, i) {
                var newBoard = score(board, number);
                var isBingo = hasBingo(newBoard);
                if (isBingo) {
                  bingo.contents = isBingo;
                  bingoBoardIndex.contents = i;
                }
                return newBoard;
              });
          if (!bingo.contents) {
            return [
                    newBoards,
                    param[1],
                    param[2]
                  ];
          }
          var winningBoard = Caml_array.get(newBoards, bingoBoardIndex.contents);
          var newBoards$1 = newBoards.filter(function (board, param) {
                return !hasBingo(board);
              });
          return [
                  newBoards$1,
                  winningBoard,
                  number
                ];
        }), [
        boards,
        undefined,
        undefined
      ]);
  var board = match[1];
  var score$1 = board !== undefined ? board.reduce((function (acc, row) {
            return acc + row.reduce((function (acc, item) {
                          return acc + Belt_Option.getWithDefault(Belt_Int.fromString(item), 0) | 0;
                        }), 0) | 0;
          }), 0) : 0;
  return Math.imul(score$1, Belt_Option.getWithDefault(Belt_Option.flatMap(match[2], Belt_Int.fromString), 0));
}

var Part02 = {
  make: make$1
};

Solution.make(make$1, "day04/input");

exports.getNumbers = getNumbers;
exports.getBoards = getBoards;
exports.score = score;
exports.transpose = transpose;
exports.hasBingo = hasBingo;
exports.Part01 = Part01;
exports.Part02 = Part02;
/*  Not a pure module */
