// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function part01(input) {
  return Belt_Array.reduce(Belt_Array.map(input.split("\n"), Belt_Int.fromString), [
                0,
                Pervasives.max_int
              ], (function (param, value) {
                  return [
                          param[0] + (
                            Caml_obj.caml_greaterthan(value, param[1]) ? 1 : 0
                          ) | 0,
                          value
                        ];
                }))[0];
}

function part02(input) {
  var arr = Belt_Array.map(input.split("\n"), Belt_Int.fromString);
  var mappedArr = Belt_Array.mapWithIndex(arr, (function (index, value) {
          var match = Belt_Array.get(arr, index - 2 | 0);
          var match$1 = Belt_Array.get(arr, index - 1 | 0);
          if (match === undefined) {
            return Pervasives.max_int;
          }
          var prev1 = Caml_option.valFromOption(match);
          if (prev1 === undefined) {
            return Pervasives.max_int;
          }
          if (match$1 === undefined) {
            return Pervasives.max_int;
          }
          var prev2 = Caml_option.valFromOption(match$1);
          if (prev2 !== undefined && value !== undefined) {
            return (prev1 + value | 0) + prev2 | 0;
          } else {
            return Pervasives.max_int;
          }
        }));
  return Belt_Array.reduce(mappedArr, [
                0,
                Pervasives.max_int
              ], (function (param, value) {
                  return [
                          param[0] + (
                            value > param[1] ? 1 : 0
                          ) | 0,
                          value
                        ];
                }))[0];
}

Solution.make(part02, "day01/input");

exports.part01 = part01;
exports.part02 = part02;
/*  Not a pure module */
